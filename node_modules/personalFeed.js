/* personalFeed.js 
 * Provides a page with recent events on the site. Users who are logged in see a personal feed.  
 */ 

var dbAccess = require('dbAccess'),
	dateUtil = require('dateUtil'),
	recentActivity = require('recentActivity'), 
	step = require('step'),
	stringUtil = require('stringUtil'), 
	util = require('util');
	
var NUM_ACTIVITIES = 20; // The number of activites to show 

/* generateActivityFeed
 * Produces the response for a personal feed when a user is logged in. 
 * If no user is defined, it will just show the recent activity on the site 
 * 
 * @param res A node http response object 
 * @param user The user (optional) 
 */ 
function generateActivityFeed(res, user) {
	var isLoggedIn = user ? true : false; 
	function generateResponse(error, results) {
		var userIds = []; 
		
		for (r in results.recentActivity) { 
			userIds.push(results.recentActivity[r].contents.user_id); 
		}
		
		if (results.followedUsers) { 
			for (r in results.followedUsers) { 
				userIds.push(results.followedUsers[r].contents.user_id); 
			}
		}
		
		getUserNames(userIds, function(err, userNames) {
			var errorOccured = false; 
			if (err) errorOccured = true; 
				
			var activityList = []; 
			var currentDate = new Date(); 
			for (var i = 0; i < results.recentActivity.length; i++) {
				var activity; 
				var activityType = results.recentActivity[i].type; 
				activity = {
					type: results.recentActivity[i].type,
					isIssue: (results.recentActivity[i].type == 'issue'), 
					isComment: (results.recentActivity[i].type == 'comment'), 
					id: results.recentActivity[i].contents.id,
					title: (results.recentActivity[i].contents.title) ? results.recentActivity[i].contents.title.abbreviate(60) : '',
					userId: results.recentActivity[i].contents.user_id, 
					username: userNames[results.recentActivity[i].contents.user_id],
					howLongAgo: currentDate.howLongAgo(results.recentActivity[i].contents.created), 
					issueId: (activityType == 'comment') ? results.recentActivity[i].contents.issue_id : results.recentActivity[i].contents.id, 
					comment: (activityType == 'comment' && results.recentActivity[i].contents.content) ? results.recentActivity[i].contents.content.abbreviate(60) : ''
				}; 
				activityList.push(activity);  
			}
			
			var followedUsersList = []; 
			if (results.followedUsers) { 
				for (var i = 0; i < results.followedUsers.length; i++) {
					var activity; 
					var activityType = results.followedUsers[i].type; 
					activity = {
						type: results.followedUsers[i].type,
						isIssue: (results.followedUsers[i].type == 'issue'), 
						isComment: (results.followedUsers[i].type == 'comment'), 
						id: results.followedUsers[i].contents.id,
						title: (results.followedUsers[i].contents.title) ? results.followedUsers[i].contents.title.abbreviate(60) : '',
						userId: results.followedUsers[i].contents.user_id, 
						username: userNames[results.followedUsers[i].contents.user_id],
						howLongAgo: currentDate.howLongAgo(results.followedUsers[i].contents.created), 
						issueId: (activityType == 'comment') ? results.followedUsers[i].contents.issue_id : results.followedUsers[i].contents.id, 
						comment: (activityType == 'comment' && results.followedUsers[i].contents.content) ? results.followedUsers[i].contents.content.abbreviate(60) : ''
					}; 
					followedUsersList.push(activity);  
				}
			}
			
			var variables = { 
				is_logged_in: isLoggedIn,
				error: errorOccured, 
				feed: activityList,
				follow_feed: followedUsersList
			}
			
			res.render('views/personalFeed.html', variables); 
		}); 
	}
	
	if (isLoggedIn) { 
		step(
			function loadData() { 
				recentActivity.getUserRecentActivityList(user.id, NUM_ACTIVITIES, this.parallel()); 
				recentActivity.getFollowedUsersFeed(user.id, NUM_ACTIVITIES, this.parallel()); 
			}, 
			function handleCallback(err, recAct, flwUsrs) { 
				var allResults = { recentActivity: recAct, followedUsers: flwUsrs }; 
				generateResponse(err, allResults); 
			}
		); 
		//recentActivity.getUserRecentActivityList(user.id, NUM_ACTIVITIES, generateResponse); 
	} 
	else { 
		recentActivity.getRecentActivityList(NUM_ACTIVITIES, function(err, results) { 
			var allResults = { recentActivity: results };
			generateResponse(err, allResults); 
		}); 
	}
}

/* getUserNames  
 * Gets the names of users based off a list of user ids 
 * 
 * @param userIds A list of users ids 
 * @param callback A callback (error, results) where results is an array with user names 
 *
 * TODO: Improve the performance and efficiency of this function 
 */ 
function getUserNames(userIds, callback) {
	var names = []; 
	dbAccess.find('users', { properties : [ 'id', 'name' ] }, function(error, results) {
		for (r in results) { 
			if (contains(userIds, results[r].id)) { 
				names[new String(results[r].id)] = (results[r].name); 
			}
		}
		callback(error, names); 
	});
}

/* contains 
 * Checks if an array contains an object 
 * 
 * @param a The array 
 * @param obj The object to look for in the array 
 */ 
function contains(a, obj) {
	var i = a.length;
	while (i--) {
		if (a[i] === obj) {
			return true;
		}
	}
	return false;
}

/* display 
 * Determines what to render 
 *
 * @param req A node http request object 
 * @param res A node http response object 
 */ 
exports.display = function(req, res) {
	req.getUser(function(error, user) {
		if (error) throw error;
		generateActivityFeed(res, user);  
	}); 	
}
